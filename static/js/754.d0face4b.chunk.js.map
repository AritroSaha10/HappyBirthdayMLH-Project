{"version":3,"file":"static/js/754.d0face4b.chunk.js","mappings":"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","sources":["Data/ProblemsData.tsx","pages/Algorithms.tsx","util/CodeEditorTheme.ts"],"sourcesContent":["const ProblemsData = [\n    {\n        title: \"CCC '04 J3 - Smile with Similes\",\n        description: 'A simile is a combination of an adjective and noun that produces a phrase such as \"Easy as pie\" or \"Cold as ice\". \\n\\n Write a program to input n adjectives and m nouns, and print out all possible similes. The first two lines of input will provide the values of n and m, in that order followed, one per line, by n adjectives and m nouns. \\n\\n Your program may output the similes in any order.',\n        sampleInput: '3\\n2\\nEasy\\nSmart\\nSoft\\npie\\nrock',\n        sampleOutput: 'Easy as pie\\nEasy as rock\\nSmart as pie\\nSmart as rock\\nSoft as pie\\nSoft as rock',\n        functionInput: [\n            3,\n            2,\n            \"Easy\",\n            \"Smart\",\n            \"Soft\",\n            \"pie\",\n            \"rock\"\n        ],\n        functionOutput: [\n            \"Easy as pie\",\n            \"Easy as rock\",\n            \"Smart as pie\",\n            \"Smart as rock\",\n            \"Soft as pie\",\n            \"Soft as rock\"\n        ]\n    },\n    {\n        title: \"CCC '04 J1 - Squares\",\n        description: 'Gigi likes to play with squares. She has a collection of equal-sized square tiles. Gigi wants to arrange some or all of her tiles on a table to form a solid square. What is the side length of the largest possible square that Gigi can build? \\n\\n For example, when Gigi has 9 tiles she can use them all to build a square whose side length is 3. But when she has only 8 tiles, the largest square that she can build has side length 2. \\n\\n Write a program that inputs the number of tiles and then prints out the maximum side length. You may assume that the number of tiles is less than ten thousand.',\n        sampleInput: '9',\n        sampleOutput: 'The largest square has side length 3.',\n        functionInput: 9,\n        functionOutput: \"The largest square has side length 3.\"\n    },\n    {\n        title: \"CCC '13 J2 - Rotating letters\",\n        description: 'An artist wants to construct a sign whose letters will rotate freely in the breeze. In order to do this, she must only use letters that are not changed by rotation of 180 degrees: I, O, S, H, Z, X, and N. \\n\\n Write a program that reads a word and determines whether the word can be used on the sign.',\n        sampleInput: 'SHINS',\n        sampleOutput: 'YES',\n        functionInput: [],\n        functionOutput: []\n    },\n\n\n]\n\nexport default ProblemsData","import React, { useEffect, useState } from 'react'\r\nimport { motion } from \"framer-motion\"\r\n\r\nimport CodeMirror from '@uiw/react-codemirror';\r\nimport { javascript } from '@codemirror/lang-javascript';\r\n\r\nimport CodeEditorTheme from \"../util/CodeEditorTheme\"\r\n\r\n// import useLocalStorage from '../hooks/useLocalStorage'\r\n\r\nimport ProblemsData from '../Data/ProblemsData'\r\n\r\nfunction argumentsToStr(args: any[]) {\r\n    let output = \"[\"\r\n    args.forEach(arg => {\r\n        if (typeof arg == \"string\") {\r\n            output = output + `'${arg}'`\r\n        } else {\r\n            output = output + `${arg}`\r\n        }\r\n\r\n        output = output + \", \"\r\n    })\r\n\r\n    output = output + \"]\"\r\n\r\n    return output\r\n}\r\n\r\nconst compareArray = (array1: any[], array2: any[]) => array1.length === array2.length && array1.every(function (value: any, index: any) { return value === array2[index] })\r\n\r\ninterface SlideInfo {\r\n    title: string,\r\n    description: string,\r\n    sampleInput: string,\r\n    sampleOutput: string,\r\n}\r\n\r\nconst squareDimension = 500;\r\nconst Algorithms = () => {\r\n\r\n    const [code, setCode] = React.useState(\r\n        `function run(input) {\\n    const output = input\\n    return output\\n}`\r\n    );\r\n\r\n    const [current, setCurrent] = useState(0);\r\n    const length = ProblemsData.length;\r\n\r\n    const [logger, setLogger] = useState(\"Run your code to see something here!\");\r\n\r\n    const nextSlide = () => {\r\n        setCurrent(current === length - 1 ? 0 : current + 1);\r\n    };\r\n\r\n    const runCode = (input: any, expectedResponse: any) => {\r\n        console.log(input)\r\n        try {\r\n            // Extract function code\r\n            const functionCodeSplit = code.split(\"\\n\")\r\n            const functionCode = functionCodeSplit.slice(1, functionCodeSplit.length - 1).join(\"\\n\")\r\n            const resp = new Function('input', functionCode)(input);\r\n\r\n            const formatVariable = (arr: any) => Array.isArray(arr) ? `\\n${arr.join(\"\\n\")}` : arr;\r\n\r\n            if (typeof expectedResponse === \"object\") {\r\n                console.log(`Response is a ${typeof expectedResponse}, perhaps an array?`)\r\n                if (!compareArray(resp, expectedResponse)) {\r\n                    setLogger(`Your response doesn't match the expected response :(\\n\\nYour response: ${formatVariable(resp)}\\n\\nExpected response: ${formatVariable(expectedResponse)}`)\r\n                } else {\r\n                    setLogger(`Good job! Your code matches our test cases! :)\\nYour response: ${formatVariable(resp)}`)\r\n                }\r\n            } else {\r\n                if (resp !== expectedResponse) {\r\n                    setLogger(`Your response doesn't match the expected response :(\\n\\nYour response: ${formatVariable(resp)}\\n\\nExpected response: ${formatVariable(expectedResponse)}`)\r\n                } else {\r\n                    setLogger(`Good job! Your code matches our test cases! :)\\nYour response: ${formatVariable(resp)}`)\r\n                }\r\n            }\r\n        } catch (e) {\r\n            alert(`Something went wrong while running your code: ${e}`)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <motion.div className='flex flex-col bg-slate-800 w-full h-full flex-grow items-center justify-center'\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1, transition: { duration: 0.5 } }}\r\n            exit={{ opacity: 0, transition: { duration: 0.5 } }}>\r\n\r\n            <div className='flex justify-center gap-4 p-4 h-full'>\r\n                <CodeMirror\r\n                    value={code}\r\n                    height=\"45rem\"\r\n                    extensions={[javascript()]}\r\n                    onChange={setCode}\r\n                    className='bg-blue-900 w-3/4 code-editor'\r\n                    theme={CodeEditorTheme}\r\n                />\r\n\r\n                <div className='flex flex-col'>\r\n                    <div className='text-xl whitespace-pre-line font-mono bg-black p-2 text-white h-64 overflow-x-hidden overflow-y-auto'>\r\n                        {logger}\r\n                    </div>\r\n                    <button className=\"font-mono w-full text-l text-white p-3 rounded-3xl bg-gradient-to-r from-blue-800/[.7] to-blue-400/[.7] my-7 shadow-2xl\" onClick={() => runCode(ProblemsData[current].functionInput, ProblemsData[current].functionOutput)}>\r\n                        Run\r\n                    </button>\r\n\r\n                    <div>\r\n                        <section className=\"slider flex w-full flex-col overflow-x-hidden overflow-y-auto h-64\">\r\n                            {ProblemsData.map((slide: SlideInfo, index: number) => {\r\n                                return (\r\n                                    <div\r\n                                        className={\r\n                                            index === current\r\n                                                ? \"opacity-100 flex flex-wrap\"\r\n                                                : \" flex flex-wrap opacity-100\"\r\n                                        }\r\n                                        key={index}\r\n                                    >\r\n                                        {index === current && (\r\n                                            <div className='bg-white flex items-center flex-col rounded-xl pb-40 w-full h-full'>\r\n                                                <h1 className='text-4xl m-10 mb-0'>{slide.title}</h1>\r\n                                                <h3 className='text-xl m-10 whitespace-pre-line'>{slide.description}</h3>\r\n                                                <h2 className='text-2xl'>Sample Input</h2>\r\n                                                <h3 className='text-xl m-10 whitespace-pre-line font-mono w-1/2 bg-gray-800 p-2 text-white'>\r\n                                                    {slide.sampleInput}\r\n                                                </h3>\r\n                                                <h2 className='text-2xl'>Sample Output</h2>\r\n                                                <h3 className='text-xl m-10 whitespace-pre-line font-mono w-1/2 bg-gray-800 p-2 text-white'>\r\n                                                    {slide.sampleOutput}\r\n                                                </h3>\r\n                                            </div>\r\n                                        )}\r\n\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </section>\r\n                        <button className='font-mono w-full text-l text-white p-3 rounded-3xl bg-gradient-to-r from-blue-800/[.7] to-blue-400/[.7] my-7 shadow-2xl' onClick={nextSlide}>\r\n                            Generate Problem\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </motion.div >\r\n    )\r\n}\r\n\r\nexport default Algorithms","import { EditorView } from \"@codemirror/view\"\r\n\r\nlet myTheme = EditorView.theme({\r\n    \"&\": {\r\n        color: \"white\",\r\n        backgroundColor: \"#034\"\r\n    },\r\n    \".cm-content\": {\r\n        caretColor: \"#0e9\"\r\n    },\r\n    \"&.cm-focused .cm-cursor\": {\r\n        borderLeftColor: \"#0e9\"\r\n    },\r\n    \"&.cm-focused .cm-selectionBackground, ::selection\": {\r\n        backgroundColor: \"#074\"\r\n    },\r\n    \".cm-gutters\": {\r\n        backgroundColor: \"#045\",\r\n        color: \"#ddd\",\r\n        border: \"none\"\r\n    }\r\n}, { dark: true })\r\n\r\nexport default myTheme;"],"names":["title","description","sampleInput","sampleOutput","functionInput","functionOutput","React","code","setCode","useState","current","setCurrent","length","ProblemsData","logger","setLogger","motion","className","initial","opacity","animate","transition","duration","exit","value","height","extensions","javascript","onChange","theme","CodeEditorTheme","onClick","input","expectedResponse","console","log","functionCodeSplit","split","functionCode","slice","join","resp","Function","formatVariable","arr","Array","isArray","array2","array1","every","index","e","alert","runCode","slide","myTheme","EditorView","color","backgroundColor","caretColor","borderLeftColor","border","dark"],"sourceRoot":""}